require "./lib/matrix_dd_lpp_t16/matriz.rb"

module MatrixDdLppT16

  #Matriz Densa que hereda de la clase Matriz
  class Matriz_Densa < Matriz

    #Constructor de la clase Matriz Densa
    def initialize(filas, columnas)
      super
      @pos = Array.new(@filas,0)
      for i in 0...@filas
        @pos[i] = Array.new(@columnas,0)
      end
    end


    #Metodo que devuelve el valor del elemento en la posision i,j
    def get(i, j)
      @pos[i][j]
    end

    #Metodo que modifica el valor del elemento en la posicion i,j
    def set(i, j, val)
      @pos[i][j] = val
    end

    #Porcentaje de numeros nulos
    def num_nulos
      total = @filas*@columnas
      cont = 0
      for i in 0...@filas
         for j in 0...@columnas
           if(@pos[i][j] != 0)
             cont += 1
           end
         end
       end
      res = total - cont
      res.to_f/total.to_f
    end

 
    #Metodo to_s (Convierte los numeros en una cadena)
    def to_s
      s = ""
      for i in 0...@filas
        for j in 0...@columnas
          s += "#{@pos[i][j].to_s} "
        end
        puts " "
      end
      s
    end


    #Metodo Suma (Suma de dos matrices)
    def +(other)
      c = Matriz_Densa.new(@filas, @columnas)
      0.upto(@filas-1) do |i|
        0.upto(@columnas-1) do |j|
          c.set(i, j, get(i,j) + other.get(i,j))
        end
      end
      c
    end

    #Metodo Resta (Resta de dos matrices)      
    def -(other)
      c = Matriz_Densa.new(@filas, @columnas)
      for i in 0...@filas
        for j in 0...@columnas
          c.set(i, j, get(i,j) - other.get(i,j))
        end
      end
      c
    end

    #Metodo Multiplicacion (Multiplicacion de dos matrices)
    def *(other)
        c = Matriz_Densa.new(@filas, other.columnas)
        for i in 0...@filas
          for j in 0...@columnas
            for k in 0...@columnas
              c.set(i, j, get(i, k) * other.get(k,j) + c.get(i,j))
            end          
          end        
        end
        c
    end

    #Maximo (Devuelve el valor maximo)
    def max
        max = get(0,0)
        for i in 0...@filas
                for j in 0...@columnas
                        if (get(i,j) > max)
                                max = get(i,j)
                        end
                end
        end
        max
    end

    #Minimo (Devuelve el valor minimo)
    def min
        min = get(0,0)
	for i in 0...@filas
                 for j in 0...@columnas
                        if (get(i,j) < min)
                                min = get(i,j)
                        end
                end
        end
        min
    end

  end
end
